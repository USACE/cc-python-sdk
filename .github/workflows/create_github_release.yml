name: Create Release

on:
  push:
    branches: [ main ]

jobs:
  build:
    permissions: write-all
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install toml build

      - name: Get package version
        id: get_version
        run: |
          echo "::set-output name=version::$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")"

      - name: Check if release exists
        id: check_release
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.get_version.outputs.version }}")
          if [[ $response -eq 200 ]]; then
            echo "Release with the same tag already exists. Please increment the version in the pyproject.toml file"
            exit 1
          fi

      - name: Build and package
        run: |
          python -m build

      - name: Install and test built package
        run: |
          python -m pip install ./dist/*.whl
          python -c "import cc_sdk; from importlib.metadata import version; version('cc_sdk')"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: |
            Release for version ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload distributions
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/dist/cc_sdk-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_name: cc_sdk-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/octet-stream